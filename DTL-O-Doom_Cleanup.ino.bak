#include <Wire.h> 
#include <RTClib.h>
#include <LiquidCrystal_I2C.h>


//defines for count down clock
#define YEAR  2042 // Date and time of some future event
#define MONTH    8 // (like retirement @ 67)
#define DAY      9 // But here it was set for Halley's comet
#define HOUR    16 // Example time here is set for noon,
#define MINUTE   0 // DON'T use leading zero or value is octal!

LiquidCrystal_I2C lcd(0x27,16,2);  // set the LCD address to 0x27 for a 20 chars and 4 line display

const int ResetButton = 2;
int tick = 0;
int years = 0;
int months = 0;
int days = 0;
int hours = 0; // start hours
int minutes = 0; //start min
int seconds = 90; //start seconds

int DelayTime = 0;

int ClearDisplay = 0;

// initialize the RTC library and setup calendar
RTC_DS1307 RTC;


// Number of days since 2000/01/01, valid for 2000-2099.  Essentially a
// copy of the date2days() function in RTClib, but it's been declared static
// I am too lazy to set it as global
uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) 
{
  static const uint8_t daysInMonth[] PROGMEM =
    { 31,28,31,30,31,30,31,31,30,31,30,31 };
  if(y >= 2000) y -= 2000;
  uint16_t days = d;
  for(uint8_t i=1; i<m; ++i) days += pgm_read_byte(daysInMonth + i - 1);
  if((m > 2) && (!(y & 3))) days++;        // Leap day for current year
  return days + 365 * y + (y + 3) / 4 - 1; // Add leap days for prior years
}//end uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) 
 

void setup() 
{
  // initialize the lcd 
  lcd.init();                      
  lcd.backlight();
  lcd.print("!! Retirement  Timer !!");

  Serial.begin(57600);  //setup the serial port for debug
  Wire.begin();         //setup I2C
  RTC.begin();          //setup RTC
  
  pinMode(ResetButton, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(ResetButton), ResetTimer, LOW);

  DelayTime = 1000; 
}//end void setup()

void loop() 
{
  lcd.clear();
//  lcd.print("Count Down Timer ");
  delay(250);

  
  while (hours > 0 || minutes > 0 || seconds >= 0) 
  {
    if (ClearDisplay == 1)
    {
      lcd.clear();
      lcd.noAutoscroll();
      ClearDisplay = 0;
    }
    GetTime();
    GetEndTime();
    delay(DelayTime);
 }//end   while (hours > 0 || minutes > 0 || seconds >= 0)
 
}//end void loop()

//take care not to put too much into this FTN called by the interupt
void ResetTimer()
{
   lcd.clear();
   ClearDisplay = 1;
   DelayTime = 1000;
}// end void ResetTimer()



void GetTime()
{
  DateTime now = RTC.now();         //grab the date and time from RTC

//  seconds = (now.second());
//  seconds -= seconds;

  lcd.setCursor(0, 0);              // set the cursor (column, line)
  //    lcd.print(now.year(), DEC);
  //    lcd.print('/');
  //    lcd.print(now.month(), DEC);
  //    lcd.print('/');
  //    lcd.print(now.day(), DEC);
  //    lcd.print(' ');
 
  if (now.hour() <= 9)              //add a space if hour is less than or equal to 9
  {
    lcd.print(' ');
  }
  lcd.print(now.hour(), DEC);       //send hour to LCD
  //lcd.setCursor(2, 0);              // set the cursor (column, line)
  lcd.print(':');                   //send : to LCD
  //lcd.setCursor(3, 0);              // set the cursor (column, line)
  
  if (now.minute() <= 9)            //add a 0 if minute is less than or equal to 9
  {
    lcd.print('0');
  }
  lcd.print(now.minute(), DEC);     //send minute to LCD
  //lcd.setCursor(5, 0);              // set the cursor (column, line)
  lcd.print(':');                   //send : to LCD
  //lcd.setCursor(6, 0);              // set the cursor (column, line)
  if (now.second() <= 9)            //add a 0 if second is less than or equal to 9
  {
    lcd.print('0');
  }
  lcd.print(now.second(), DEC);     //send second to LCD
}//end void GetTime()

void GetEndTime()
{
  // Determine number of minutes until YEAR/MONTH/DAY/etc.
  DateTime now = RTC.now();         //grab the date and time from RTC --->again...there are better ways of doing this!
  uint32_t d1  = date2days(YEAR, MONTH, DAY),                   // End day
           d2  = date2days(now.year(), now.month(), now.day()); // Today
  int32_t  s1 = (HOUR * 60 + MINUTE) * 60L,
           s2 = (now.hour() * 60 + now.minute()) * 60L + now.second();   
                   
  if(d2 > d1) 
  { // Date already passed
    minutes = 0;
  } 
  else 
  {
    if((d2 == d1) && (s2 >= s1)) // Same day, hour/min/sec has passed
    { 
      minutes = 0;
    } 
    else 
    {
      s1 -= s2; // Seconds time difference, may be negative, this is OK
      seconds = (s1 % 60);
        
      if (seconds >= 0)
      {
        minutes = (59-abs(MINUTE - now.minute()));
      }
      else
      {
        minutes = (60-abs(MINUTE - now.minute()));
      }

      if (minutes >= 0)
      {
        if (HOUR > now.hour())
        {
          hours = ((HOUR-now.hour())-1);  
        }
        else
        {
          hours = (23-abs(HOUR - now.hour()));
        }
      }
      else
      {
        hours = (24-abs(HOUR - now.hour()));
      }

      if (hours >= 0)
      {
        days = (30-abs(DAY - now.day()));
      }
      else
      {
        days = (31-abs(DAY - now.day()));
      }

      if (days >= 0)
      {
        months = (11-abs(MONTH - now.month()));
      }
      else
      {
        months = (12-abs(MONTH - now.month()));
      }
     
      if (months >= 0)
      {
        years = (YEAR - now.year()-1);
      }
      else
      {
        years = (YEAR - now.year());
      }
    }


           lcd.setCursor(0,1);
           lcd.print(years);
           lcd.print(":");
           lcd.print(months);
           lcd.print(":");
           lcd.print(days);
           lcd.print(":");
           lcd.print(hours);
           lcd.print(":");
           lcd.print(minutes);
           lcd.print(":");
           lcd.print(seconds);
  
  }
}//end void GetEndTime() 
